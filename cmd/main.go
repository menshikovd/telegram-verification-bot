package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"

	"telegram_verification_bot/internal/bot"
	"telegram_verification_bot/internal/config"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.LoadConfig("configs/config.json")
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	b, err := bot.NewBot(cfg)
	if err != nil {
		log.Fatalf("Failed to create bot: %v", err)
	}

	log.Println("üöÄ Bot started successfully!")
	log.Printf("Admin ID: %d", cfg.AdminID)
	log.Println("üìö Available commands:")
	log.Println("  /start - welcome message")
	log.Println("  /register - start registration process")  
	log.Println("  /status - check application status")
	log.Println("  /help - show help")
	log.Println("  /users - list all users (admin only)")
	log.Println("  /approve ID role - approve user (admin only)")
	log.Println("  /reject ID reason - reject user (admin only)")
	log.Println()
	log.Println("Press Ctrl+C to stop the bot")

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	go func() {
		c := make(chan os.Signal, 1)
		signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
		<-c
		log.Println("üõë Shutting down bot...")
		os.Exit(0)
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	if err := b.Start(); err != nil {
		log.Fatalf("Bot error: %v", err)
	}
}
