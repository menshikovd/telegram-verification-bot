package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"telegram_verification_bot/internal/config"
	"telegram_verification_bot/internal/models"
	"telegram_verification_bot/internal/sheets"
)

type Bot struct {
	api            *tgbotapi.BotAPI
	config         *config.Config
	sheets         *sheets.SheetsService
	registrations  map[int64]*models.RegistrationState
	mutex          sync.RWMutex
}

func NewBot(cfg *config.Config) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(cfg.TelegramToken)
	if err != nil {
		return nil, err
	}

	sheetsService, err := sheets.NewSheetsService(cfg.CredentialsPath, cfg.SpreadsheetID)
	if err != nil {
		return nil, err
	}

	api.Debug = false
	log.Printf("Authorized on account %s", api.Self.UserName)

	return &Bot{
		api:           api,
		config:        cfg,
		sheets:        sheetsService,
		registrations: make(map[int64]*models.RegistrationState),
	}, nil
}

func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			go b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			go b.handleCallbackQuery(update.CallbackQuery)
		}
	}

	return nil
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	b.ensureMenuSet(message)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
	if message.IsCommand() || b.isMenuButton(message.Text) {
		switch {
		case message.Command() == "start" || message.Text == "üè† –ú–µ–Ω—é":
			b.handleStart(message)
		case message.Command() == "register" || message.Text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
			b.handleRegister(message)
		case message.Command() == "status" || message.Text == "üìä –°—Ç–∞—Ç—É—Å":
			b.handleStatus(message)
		case message.Command() == "help" || message.Text == "‚ùì –°–ø—Ä–∞–≤–∫–∞":
			b.handleHelp(message)
		case message.Text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" && message.From.ID == b.config.AdminID:
			b.handleListUsers(message)
		case message.Text == "üîç –ü–æ–∏—Å–∫" && message.From.ID == b.config.AdminID:
			b.handleAdminSearchMode(message)
		case message.Command() == "approve" || message.Command() == "reject":
			b.handleModeration(message)
		case message.Command() == "users":
			b.handleListUsers(message)
		}
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	b.mutex.RLock()
	reg, exists := b.registrations[userID]
	b.mutex.RUnlock()
	if exists {
		b.handleRegistrationStep(message, reg)
		return
	}

	// –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	b.handleSearch(message)
}

func (b *Bot) handleStart(message *tgbotapi.Message) {
	text := `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é
	keyboard := b.createPermanentMenu(message.From.ID)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleRegister(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	existingUser, _ := b.sheets.GetUser(userID)
	if existingUser != nil {
		var statusText string
		switch existingUser.Status {
		case models.StatusPending:
			statusText = "‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
		case models.StatusApproved:
			statusText = fmt.Sprintf("‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞ (—Ä–æ–ª—å: %s)", existingUser.Role)
		case models.StatusRejected:
			statusText = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
		}

		text := fmt.Sprintf("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: %s", statusText)
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	reg := &models.RegistrationState{
		TelegramID: userID,
		Step:       models.StepFirstName,
		User: models.User{
			TelegramID:   userID,
			Username:     message.From.UserName,
			RegisterDate: time.Now(),
			Status:       models.StatusPending,
			Role:         models.RoleGuest,
		},
	}

	b.mutex.Lock()
	b.registrations[userID] = reg
	b.mutex.Unlock()

	text := "üìù –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\nüë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è\n*–≤ —Ñ–æ—Ä–º–∞—Ç–µ:* –ò–≤–∞–Ω"
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

func (b *Bot) handleRegistrationStep(message *tgbotapi.Message, reg *models.RegistrationState) {
	userID := message.From.ID

	switch reg.Step {
	case models.StepFirstName:
		reg.User.FirstName = message.Text
		reg.Step = models.StepLastName
		text := "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é\n*–≤ —Ñ–æ—Ä–º–∞—Ç–µ:* –ò–≤–∞–Ω–æ–≤"
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)

	case models.StepLastName:
		reg.User.LastName = message.Text
		reg.Step = models.StepPhone
		text := "‚úÖ –•–æ—Ä–æ—à–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n*–≤ —Ñ–æ—Ä–º–∞—Ç–µ:* +71234567890"
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)

	case models.StepPhone:
		reg.User.Phone = message.Text
		reg.Step = models.StepEmail
		text := "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email\n*–ø—Ä–∏–º–µ—Ä:* example@mail.com"
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)

	case models.StepEmail:
		reg.User.Email = message.Text
		reg.Step = models.StepAddress
		text := `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ò –Ω–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –ø–æ –æ–±—Ä–∞–∑—Ü—É:

üèò *–ü–æ—Å–µ–ª–æ–∫ Green Forest Club:* GFC P11
üèò *–ü–æ—Å–µ–ª–æ–∫ Green Forest Park:* GFP P11
üèò *Green Forest Premium:* GFPr P11`
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)

	case models.StepAddress:
		reg.User.Address = message.Text
		reg.Step = models.StepComplete

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets
		err := b.sheets.AddUser(&reg.User)
		if err != nil {
			log.Printf("Error adding user to sheets: %v", err)
			text := "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
			msg := tgbotapi.NewMessage(message.Chat.ID, text)
			b.api.Send(msg)
			return
		}

		// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		b.mutex.Lock()
		delete(b.registrations, userID)
		b.mutex.Unlock()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		text := fmt.Sprintf(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ –ò–º—è: %s %s
üì± –¢–µ–ª–µ—Ñ–æ–Ω: %s
üìß Email: %s
üè† –ê–¥—Ä–µ—Å: %s

‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.`, 
			reg.User.FirstName, reg.User.LastName, reg.User.Phone, reg.User.Email, reg.User.Address)

		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
		b.sendAdminNotification(&reg.User)
	}
}

func (b *Bot) sendAdminNotification(user *models.User) {
	text := fmt.Sprintf(`üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s %s (@%s)
üì± ID: %d
üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s
üìß Email: %s
üè† –ê–¥—Ä–µ—Å: %s
üìÖ –î–∞—Ç–∞: %s`,
		user.FirstName, user.LastName, user.Username, user.TelegramID,
		user.Phone, user.Email, user.Address,
		user.RegisterDate.Format("2006-01-02 15:04:05"))

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
	keyboard := b.createModerationMenu(user.TelegramID)

	msg := tgbotapi.NewMessage(b.config.AdminID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// createModerationMenu —Å–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
func (b *Bot) createModerationMenu(userID int64) tgbotapi.InlineKeyboardMarkup {
	row1 := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ñ–∏—Ç–µ–ª—å", fmt.Sprintf("approve_%d_–∂–∏—Ç–µ–ª—å", userID)),
		tgbotapi.NewInlineKeyboardButtonData("‚úÖ –°–æ—Å–µ–¥", fmt.Sprintf("approve_%d_—Å–æ—Å–µ–¥", userID)),
		tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û–ö", fmt.Sprintf("approve_%d_–û–ö", userID)),
	}
	row2 := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("reject_%d", userID)),
	}

	return tgbotapi.NewInlineKeyboardMarkup(row1, row2)
}

func (b *Bot) handleStatus(message *tgbotapi.Message) {
	userID := message.From.ID

	user, err := b.sheets.GetUser(userID)
	if err != nil {
		text := "‚ùì –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	var statusText string
	switch user.Status {
	case models.StatusPending:
		statusText = "‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
	case models.StatusApproved:
		statusText = fmt.Sprintf("‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞ (—Ä–æ–ª—å: %s)", user.Role)
	case models.StatusRejected:
		statusText = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
		if user.AdminComment != "" {
			statusText += fmt.Sprintf("\n–ü—Ä–∏—á–∏–Ω–∞: %s", user.AdminComment)
		}
	}

	text := fmt.Sprintf(`üìã –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: %s

üë§ –ò–º—è: %s %s
üìß Email: %s
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s`, 
		statusText, user.FirstName, user.LastName, user.Email,
		user.RegisterDate.Format("2006-01-02 15:04"))

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)
}

func (b *Bot) handleModeration(message *tgbotapi.Message) {
	// –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
	if message.From.ID != b.config.AdminID {
		text := "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		text := "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /approve ID —Ä–æ–ª—å –∏–ª–∏ /reject ID –ø—Ä–∏—á–∏–Ω–∞"
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	userID, err := strconv.ParseInt(args[1], 10, 64)
	if err != nil {
		text := "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	if message.Command() == "approve" {
		if len(args) < 3 {
			text := "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å: –∂–∏—Ç–µ–ª—å, —Å–æ—Å–µ–¥, –û–ö"
			msg := tgbotapi.NewMessage(message.Chat.ID, text)
			b.api.Send(msg)
			return
		}

		role := models.UserRole(args[2])
		if role != models.RoleResident && role != models.RoleNeighbor && role != models.RoleOK {
			text := "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∂–∏—Ç–µ–ª—å, —Å–æ—Å–µ–¥, –û–ö"
			msg := tgbotapi.NewMessage(message.Chat.ID, text)
			b.api.Send(msg)
			return
		}

		err = b.sheets.UpdateUserStatus(userID, models.StatusApproved, role, "")
		if err != nil {
			text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."
			msg := tgbotapi.NewMessage(message.Chat.ID, text)
			b.api.Send(msg)
			return
		}

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		userMsg := tgbotapi.NewMessage(userID, fmt.Sprintf("üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–í–∞—à–∞ —Ä–æ–ª—å: %s", role))
		b.api.Send(userMsg)

		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É
		text := fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –æ–¥–æ–±—Ä–µ–Ω —Å —Ä–æ–ª—å—é: %s", userID, role)
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)

	} else if message.Command() == "reject" {
		reason := strings.Join(args[2:], " ")
		if reason == "" {
			reason = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
		}

		err = b.sheets.UpdateUserStatus(userID, models.StatusRejected, models.RoleGuest, reason)
		if err != nil {
			text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."
			msg := tgbotapi.NewMessage(message.Chat.ID, text)
			b.api.Send(msg)
			return
		}

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		userMsg := tgbotapi.NewMessage(userID, fmt.Sprintf("‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: %s", reason))
		b.api.Send(userMsg)

		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É
		text := fmt.Sprintf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: %s", userID, reason)
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
	}
}

func (b *Bot) handleListUsers(message *tgbotapi.Message) {
	// –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫
	if message.From.ID != b.config.AdminID {
		text := "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	users, err := b.sheets.GetAllUsers()
	if err != nil {
		text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	if len(users) == 0 {
		text := "üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	text := "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
	for i, user := range users {
		status := string(user.Status)
		switch user.Status {
		case models.StatusPending:
			status = "‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
		case models.StatusApproved:
			status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω"
		case models.StatusRejected:
			status = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω"
		}

		text += fmt.Sprintf("%d. %s %s (@%s)\n   ID: %d | %s | –†–æ–ª—å: %s\n\n",
			i+1, user.FirstName, user.LastName, user.Username,
			user.TelegramID, status, user.Role)

		// Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
		if len(text) > 3500 {
			msg := tgbotapi.NewMessage(message.Chat.ID, text)
			b.api.Send(msg)
			text = ""
		}
	}

	if text != "" {
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
	}
}

func (b *Bot) handleSearch(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	userID := message.From.ID
	currentUser, err := b.sheets.GetUser(userID)
	if err != nil || currentUser.Status != models.StatusApproved {
		text := "‚ùì –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register"
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	query := strings.ToLower(message.Text)
	users, err := b.sheets.GetAllUsers()
	if err != nil {
		text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ."
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	var results []string
	for _, user := range users {
		if user.Status != models.StatusApproved {
			continue
		}

		// –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º: –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, username, —Ç–µ–ª–µ—Ñ–æ–Ω, email, –∞–¥—Ä–µ—Å
		searchText := strings.ToLower(fmt.Sprintf("%s %s %s %s %s %s",
			user.FirstName, user.LastName, user.Username, user.Phone, user.Email, user.Address))

		if strings.Contains(searchText, query) {
			result := fmt.Sprintf("üë§ %s %s (@%s)\nüè† %s | –†–æ–ª—å: %s",
				user.FirstName, user.LastName, user.Username, user.Address, user.Role)
			results = append(results, result)
		}

		if len(results) >= 10 { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
			break
		}
	}

	if len(results) == 0 {
		text := "üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	text := fmt.Sprintf("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"%s\":\n\n%s",
		message.Text, strings.Join(results, "\n\n"))

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)
}

func (b *Bot) handleHelp(message *tgbotapi.Message) {
	text := `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

üë• –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üîπ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üîπ /register - –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
üîπ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
üîπ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîç –ü–æ–∏—Å–∫:
–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
üîπ /users - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üîπ /approve ID —Ä–æ–ª—å - –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É
üîπ /reject ID –ø—Ä–∏—á–∏–Ω–∞ - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É

üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: –∂–∏—Ç–µ–ª—å, —Å–æ—Å–µ–¥, –û–ö`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)
}

func (b *Bot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	data := callback.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	msg := tgbotapi.NewCallback(callback.ID, "")
	b.api.Request(msg)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
	switch data {
	case "register":
		// –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		fakeMsg := &tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
			Text: "/register",
		}
		b.handleRegister(fakeMsg)

	case "status":
		fakeMsg := &tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
			Text: "/status",
		}
		b.handleStatus(fakeMsg)

	case "help":
		fakeMsg := &tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
			Text: "/help",
		}
		b.handleHelp(fakeMsg)

	case "admin_users":
		if userID == b.config.AdminID {
			fakeMsg := &tgbotapi.Message{
				From: callback.From,
				Chat: callback.Message.Chat,
				Text: "/users",
			}
			b.handleListUsers(fakeMsg)
		}

	case "admin_search":
		if userID == b.config.AdminID {
			text := "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, —Ç–µ–ª–µ—Ñ–æ–Ω, email, –∞–¥—Ä–µ—Å):"
			msg := tgbotapi.NewMessage(callback.Message.Chat.ID, text)
			b.api.Send(msg)
		}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
	default:
		if strings.HasPrefix(data, "approve_") {
			if userID == b.config.AdminID {
				b.handleInlineApproval(callback)
			}
		} else if strings.HasPrefix(data, "reject_") {
			if userID == b.config.AdminID {
				b.handleInlineRejection(callback)
			}
		}
	}
}

// createMainMenu —Å–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *Bot) createMainMenu(userID int64) tgbotapi.InlineKeyboardMarkup {
	var buttons [][]tgbotapi.InlineKeyboardButton

	// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	row1 := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "register"),
		tgbotapi.NewInlineKeyboardButtonData("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "status"),
	}
	row2 := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚ùì –°–ø—Ä–∞–≤–∫–∞", "help"),
	}

	buttons = append(buttons, row1, row2)

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if userID == b.config.AdminID {
		adminRow1 := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "admin_users"),
		}
		adminRow2 := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "admin_search"),
		}
		buttons = append(buttons, adminRow1, adminRow2)
	}

	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// handleInlineApproval –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
func (b *Bot) handleInlineApproval(callback *tgbotapi.CallbackQuery) {
	parts := strings.Split(callback.Data, "_")
	if len(parts) < 3 {
		return
	}

	userID, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		return
	}

	role := models.UserRole(parts[2])

	err = b.sheets.UpdateUserStatus(userID, models.StatusApproved, role, "")
	if err != nil {
		text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userMsg := tgbotapi.NewMessage(userID, fmt.Sprintf("üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–í–∞—à–∞ —Ä–æ–ª—å: %s", role))
	b.api.Send(userMsg)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
	newText := fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω —Å —Ä–æ–ª—å—é: %s", role)
	editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, newText)
	b.api.Send(editMsg)
}

// handleInlineRejection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
func (b *Bot) handleInlineRejection(callback *tgbotapi.CallbackQuery) {
	parts := strings.Split(callback.Data, "_")
	if len(parts) < 2 {
		return
	}

	userID, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		return
	}

	reason := "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
	err = b.sheets.UpdateUserStatus(userID, models.StatusRejected, models.RoleGuest, reason)
	if err != nil {
		text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userMsg := tgbotapi.NewMessage(userID, fmt.Sprintf("‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: %s", reason))
	b.api.Send(userMsg)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
	newText := fmt.Sprintf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: %s", reason)
	editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, newText)
	b.api.Send(editMsg)
}

// createPermanentMenu —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
func (b *Bot) createPermanentMenu(userID int64) tgbotapi.ReplyKeyboardMarkup {
	var buttons [][]tgbotapi.KeyboardButton

	// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	row1 := []tgbotapi.KeyboardButton{
		tgbotapi.NewKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
		tgbotapi.NewKeyboardButton("üìä –°—Ç–∞—Ç—É—Å"),
	}
	row2 := []tgbotapi.KeyboardButton{
		tgbotapi.NewKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞"),
		tgbotapi.NewKeyboardButton("üè† –ú–µ–Ω—é"),
	}

	buttons = append(buttons, row1, row2)

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if userID == b.config.AdminID {
		adminRow := []tgbotapi.KeyboardButton{
			tgbotapi.NewKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
			tgbotapi.NewKeyboardButton("üîç –ü–æ–∏—Å–∫"),
		}
		buttons = append(buttons, adminRow)
	}

	return tgbotapi.NewReplyKeyboard(buttons...)
}

// isMenuButton –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
func (b *Bot) isMenuButton(text string) bool {
	menuButtons := []string{
		"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
		"üìä –°—Ç–∞—Ç—É—Å",
		"‚ùì –°–ø—Ä–∞–≤–∫–∞",
		"üè† –ú–µ–Ω—é",
		"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
		"üîç –ü–æ–∏—Å–∫",
	}

	for _, button := range menuButtons {
		if text == button {
			return true
		}
	}
	return false
}

// handleAdminSearchMode –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
func (b *Bot) handleAdminSearchMode(message *tgbotapi.Message) {
	if message.From.ID != b.config.AdminID {
		text := "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		b.api.Send(msg)
		return
	}

	text := "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ: –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—É, email, –∞–¥—Ä–µ—Å—É"
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)
}

// ensureMenuSet —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *Bot) ensureMenuSet(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ start
	if message.IsCommand() && message.Command() == "start" {
		return // –ú–µ–Ω—é –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ handleStart
	}

	// –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–Ω—é
	// –ï—Å–ª–∏ –Ω–µ—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
	if !b.isMenuButton(message.Text) && !message.IsCommand() {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é —Ç–∏—Ö–æ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É
		keyboard := b.createPermanentMenu(message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üîÑ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
		msg.ReplyMarkup = keyboard
		b.api.Send(msg)
	}
}
